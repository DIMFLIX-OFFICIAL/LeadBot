import asyncio
import re
import traceback
from dataclasses import dataclass, field
from typing import Dict, List

from loguru import logger
from pyrogram import Client, idle
from pyrogram.enums import ParseMode
from pyrogram.handlers import MessageHandler
from pyrogram.types import Message

from .config import cfg
from .database.models import Account
from .loader import bot, db


@dataclass
class Worker:
    account: Account
    session: Client
    suitable_chats: List[int] = field(init=False, default_factory=list)


class LeadBot:
    def __init__(
        self,
        managers_chat: int,
        trigger_words: List[str],
        folder_name: str,
        blacklist_chats: List[int],
        log_chat_id: int
    ):
        self.managers_chat: int = managers_chat
        self.blacklist_chats: List[int] = blacklist_chats
        self.folder_name: str = folder_name
        self.trigger_words: List[str] = trigger_words
        self.log_chat_id = log_chat_id
        self.workers: Dict[int, Worker] = dict()

    async def start(self):
        await self.init_clients()
        logger.info("–ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π!")
        asyncio.create_task(self.while_update_accounts_chats())
        await idle()

    async def init_clients(self):
        accounts = await db.accounts.get_accounts()
        error_accounts = []
        connected_accounts = 0

        for account in accounts:
            try:
                if account.proxy:
                    client = Client(
                        name="my_account",
                        api_id=account.api_id,
                        api_hash=account.api_hash,
                        session_string=account.session_string,
                        proxy=account.proxy,
                    )
                else:
                    client = Client(
                        name="my_account",
                        api_id=account.api_id,
                        api_hash=account.api_hash,
                        session_string=account.session_string,
                    )

                client.add_handler(MessageHandler(self.handle_message))
                await client.start()
                self.workers[account.id] = Worker(
                    account=account,
                    session=client,
                )
                connected_accounts += 1
            except Exception:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {traceback.format_exc()}"
                )
                await db.accounts.set_account_valid(
                    account_id=accounts.id,
                    status=False
                )
                error_accounts.append(account.id)

            await self.log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {connected_accounts}/{len(accounts)}")
            if len(error_accounts) > 0:
                await self.log_error(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º: {','.join(error_accounts)}")

            await self.update_accounts_chats()

    async def while_update_accounts_chats(self):
        while True:
            await asyncio.sleep(cfg.bot.delay_for_update_accounts_chats)
            await self.update_accounts_chats()

    async def update_accounts_chats(self):
        for worker in self.workers.values():
            logger.info(f"–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —É: {worker.account.id}")
            client = worker.session

            try:
                folders = await client.get_folders()
                new_chats = []

                for f in folders:
                    if f.title.text == self.folder_name:
                        if f.included_chats:
                            for chat in f.included_chats:
                                new_chats.append(chat.id)
                        if f.pinned_chats:
                            for chat in f.pinned_chats:
                                new_chats.append(chat.id)

                worker.suitable_chats.clear()
                worker.suitable_chats.extend(new_chats)
            except AttributeError:
                logger.error(f"–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ {worker.account.id} –Ω–µ—Ç –ø–∞–ø–æ–∫!")
                await self.log_error(
                    f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {worker.account.id}"
                )
            except Exception:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {worker.account.id}: {traceback.format_exc()}"
                )
                await self.log_error(
                    f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–∫–∫–∞—É–Ω—Ç–∞ {worker.account.id}"
                )

        await self.log("–û–±–Ω–æ–≤–∏–ª —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –Ω–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–∞—Ö!")

    async def handle_message(self, client: Client, message: Message):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.chat.username}: {message.link}")

        try:
            text = message.text
            user = message.from_user
            message_link = message.link

            if not text:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
                return

            if message.chat.id in cfg.bot.blacklist_chats:
                logger.info("–ß–∞—Ç –≤ –±–ª—ç–∫ –ª–∏—Å—Ç–µ")
                return

            for w in self.workers.values():
                if client is w.session:
                    if message.chat.id in w.suitable_chats:
                        break
            else:
                logger.info("–ß–∞—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ.")
                return

            text_lower = message.text.lower()
            if not any(
                re.search(rf"\b{word}\b", text_lower) for word in self.trigger_words
            ):
                logger.info("–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤")
                return

            report = (
                f"‚ö†Ô∏è **–ù–æ–≤—ã–π –ª–∏–¥!**\n\n"
                f"üìÑ –°–æ–æ–±—â–µ–Ω–∏–µ: `{message.text[:200]}...`\n"
                f"üí¨ –ß–∞—Ç: {message.chat.title} (ID: `{message.chat.id}`; @{message.chat.username})\n"
                f"üë§ –ê–≤—Ç–æ—Ä: @{user.username} (ID: `{user.id}`)\n"
                f"üïí –í—Ä–µ–º—è: {message.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"üî¢ –î–ª–∏–Ω–∞: {len(message.text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"üîó {message_link}"
            )

            await bot.send_message(
                chat_id=self.managers_chat,
                text=report,
                parse_mode=ParseMode.MARKDOWN,
            )
            await self.log(f"üì© –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ {message.chat.title}")
        except Exception as e:
            await self.log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    async def log(self, text: str):
        await self.send_to_log_chat(f"‚ÑπÔ∏è {text}")

    async def log_error(self, text: str):
        await self.send_to_log_chat(f"üö® {text}")

    async def send_to_log_chat(self, text: str):
        try:
            await bot.send_message(self.log_chat_id, text)
        except Exception:
            print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {traceback.format_exc()}")
